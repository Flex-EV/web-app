name: Deploy workflow

on:
  push:
    branches:
      - master
      - develop

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Create Environment File
        run: |
          if [[ "$GITHUB_REF" == "refs/heads/master" ]]; then
            echo "VITE_GOOGLE_MAPS_API_KEY=${{ secrets.PROD_GOOGLE_MAPS_API_KEY }}" >> .env
            echo "VITE_GOOGLE_MAP_ID=${{ secrets.PROD_GOOGLE_MAP_ID }}" >> .env
            echo "VITE_API_BASE_URL=${{ secrets.PROD_API_BASE_URL }}" >> .env
          else
            echo "VITE_GOOGLE_MAPS_API_KEY=${{ secrets.DEV_GOOGLE_MAPS_API_KEY }}" >> .env
            echo "VITE_GOOGLE_MAP_ID=${{ secrets.DEV_GOOGLE_MAP_ID }}" >> .env
            echo "VITE_API_BASE_URL=${{ secrets.DEV_API_BASE_URL }}" >> .env
          fi

      - name: Install and Build
        run: |
          yarn install
          yarn build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      # Dev Deployment
      - name: Configure AWS Dev Credentials
        if: github.ref == 'refs/heads/develop'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_DEV_ECS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEV_ECS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Render Dev Task Definition
        if: github.ref == 'refs/heads/develop'
        id: render-dev-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .aws/dev-ecs-task-definition.json
          container-name: web-app
          image: ${{ env.image }}

      - name: Deploy to Dev ECS
        if: github.ref == 'refs/heads/develop'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-dev-container.outputs.task-definition }}
          service: web-app
          cluster: dev_web-app

      # Prod Deployment
      - name: Configure AWS Prod Credentials
        if: github.ref == 'refs/heads/master'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_PROD_ECS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_PROD_ECS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Render Prod Task Definition
        if: github.ref == 'refs/heads/master'
        id: render-prod-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .aws/prod-ecs-task-definition.json
          container-name: web-app
          image: ${{ env.image }}

      - name: Deploy to Prod ECS
        if: github.ref == 'refs/heads/master'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-prod-container.outputs.task-definition }}
          service: web-app
          cluster: prod_web-app
